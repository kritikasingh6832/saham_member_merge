public List<MemGroupContractProducerVO> createInheritingMemGroupContractProducerList(long memGroupID, long memGroupContractID,
                                                                                         ProducerCompContractProducerDto producerCompContractProducerDto) {
        SysFinSettingVO sysFinSettingVO = sysFinSetting.read();
        List<MemGroupContractProducerVO> memGroupContractProducerVOs = new ArrayList<>();
        List<ProducerCompProducerDto> producerCompProducerDtos = producerCompContractProducerDto.getProducerCompProducers();
        List<ErrorMessage> errorMessageList = new ArrayList<>();

        for (ProducerCompProducerDto producerCompProducerDto : producerCompProducerDtos) {

            Date expirationDate = StringUtils.isBlank(producerCompProducerDto.getExpirationDate()) ?
                    UhgCalendarUtilities.DEFAULT_TERMINATION_DATE : UhgCalendarUtilities.getSQLDate(producerCompProducerDto.getExpirationDate());
            List<MemGroupContractAffilVO> memGroupContractAffilVOList = memGroupContractAffil.listActiveByMemGroupIDContractIDOverlappingDates(memGroupID, memGroupContractID,
                    UhgCalendarUtilities.getSQLDate(producerCompProducerDto.getEffectiveDate()), expirationDate);

            for (MemGroupContractAffilVO memGroupContractAffilVO : memGroupContractAffilVOList) {
                String billingSchedID = null;
                if (StringUtils.equals(producerCompContractProducerDto.getCompensationType(), ReferenceConstants.COMPENSATIONTYPE_SERVICE_FEE)) {
                    validateBillingCalcMethod(producerCompProducerDto);
                    validateMessageFields(producerCompProducerDto);
                    List<SysBillingDefaultValueVO> sysBillingDefaultValueVOList = (List<SysBillingDefaultValueVO>) getSysBillingDefaultValue(
                            memGroupID, memGroupContractID,
                            producerCompContractProducerDto, producerCompProducerDto
                    );
                    if (sysBillingDefaultValueVOList.isEmpty()) {
                        errorMessageList.add(MemberGroupMessages.ERR_FAILED_TO_CREATE_PRODUCER_BILLING_SCHEDULE.addMessageArgs(MemGroupContractProducerVO.getMemGroupID(), MemGroupContractProducerVO.getMemGroupContractID(),
                                MemGroupContractProducerVO.getMemGroupContractOptID(), MemGroupContractProducerVO.getMemGroupContractPlanOptionID(), MemGroupContractProducerVO.getMemGroupPopulationID()));
                        continue;
                    }
                    for (SysBillingDefaultValueVO sysBillingDefaultValueVO : sysBillingDefaultValueVOList) {
                        billingSchedID = producerCompGlobalDataAddService.createBillingScheduleForProducer(sysBillingDefaultValueVO, producerCompProducerDto);
                    }
                    MemGroupContractProducerVO memGroupContractProducerVO = createInheritingMemGroupContractProducer(
                            memGroupContractID,
                            billingSchedID,
                            sysFinSettingVO,
                            producerCompContractProducerDto,
                            producerCompProducerDto,
                            memGroupContractAffilVO);
                    memGroupContractProducerVOs.add(memGroupContractProducerVO);
                }
            }

        }

        return memGroupContractProducerVOs;
    }

The error message is indicating that you are trying to call a non-static method 'getMemGroupID()' from a static context. The method 'getMemGroupID()' is likely an instance method that belongs to the 'MemGroupContractProducerVO' class. To fix the error, you should create an instance of the 'MemGroupContractProducerVO' class and call the 'getMemGroupID()' method on that instance instead of calling it on the class itself.
